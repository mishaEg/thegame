{"version":3,"sources":["functional/utils/getRandomInt.js","functional/createObject.js","functional/createMap.js","functional/initMap.js","Components/NotificationHeader.jsx","Units/Hero.js","functional/utils/isContact.js","functional/enemiesAction.js","Units/Enemy.js","functional/utils/getTopItem.js","functional/moveHero.js","functional/expansionMap.js","functional/drawTunnel.js","functional/drawCave.js","functional/movingAndDigging.js","functional/digging.js","functional/heroActions.js","functional/pickUp.js","Components/GamesMap.jsx","functional/utils/getRandomCoordinates.js","functional/drawMap.jsx","Components/App.jsx","index.js"],"names":["getRandomInt","min","max","Math","floor","random","createObject","inputMap","countOfObjects","object","elements","counter","x","length","y","len","icon","push","createMap","map","wall","emptySpace","currentRow","currentColumn","initMap","startMap","sword","shield","grass","NotificationHeader","heroStats","hero","_this","props","concat","health","weapon","name","money","message","this","react_default","a","createElement","className","Component","Hero","Object","classCallCheck","positionX","positionY","damage","defence","countOfPoison","readyToMine","isContact","target_one","target_two","onceEnemyAction","creature","otherCreatures","dx","forEach","currentDy","index","damagedHero","objectSpread","enemyHitsHero","matrixForPF","indexRow","indexCol","iconLastItem","hereEnemy","currentCreature","createMatrixForPF","finder","PF","AStarFinder","grid","Grid","path","findPath","move","updatedHero","updatedCreature","enemiesAction","creatures","updatedAllCreatures","status","regeneration","enemyWithoutCurrent","filter","currCreature","_onceEnemyAction","updatedCreatures","toConsumableArray","Enemy","depthOfSleep","stamina","type","checkTemper","irritation","rage","humility","Error","dead","wakedUp","newPositionX","newPositionY","tired","fallAsleep","getTopItem","moveHero","key","dy","wasAfight","changeMap","isMoved","xTravelCoordinates","yTravelCoordinates","upperItem","reduce","accumulator","_heroHitsCreature","isDied","getDamage","enemyStatusBefore","fightMessage","heroHitsCreature","ectoplasma","updatedMap","movedHero","expansionMap","targetCoordinate","replacement","replacementItems","mapForUpdate","allEnemyOnMap","elementsForReplace","targetCoordinateX","targetCoordinateY","heroPositionX","heroPositionY","checkCoordinateY","checkCoordinateX","undefined","_loop","newAddedLine","unshift","currentEnemy","currentReplace","updatedTargetCoordinates","drawTunnel","diggingCoordinate","generateGem","gem","_expansionMap","digCoordinateOnMapWithWall","mapWithWall","heroCoordOnMapWithWall","creaturesOnMapWithWall","_expansionMap2","digCoordOnMapWithTunnel","mapWithTunnel","heroOnMapWithTunnel","creaturesOnMapWithTunnel","updateDiggingCoordinate","drawCave","direction","treasure","_drawTunnel","diggingCoordinateWithTunnel","_drawBodyCave","iron_sword","iron_shield","targetCoordinateOnMapWithFloorCave","mapWithFloorCave","heroOnMapWithFloorCave","creaturesOnMapWithFloorCave","targetCoordOnMapWithCave","mapWithCave","heroOnMapWithCave","creaturesOnMapWithCave","resultCreaturesOnMap","drawBodyCave","movingAndDigging","loggingMessage","heroAfterAction","allEnemyAfterAction","mapAfterAction","_digging","diggingItem","updatedObjects","RANDOM_GENERATE_ITEM","_drawCave","messageAboutGeneratedGem","digging","_moveHero","heroActions","gex","pop","takeShield","takeWeapon","eat","pickUp","_movingAndDigging","GamesMap","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","createdMap","coordinates","coordinateX","coordinateY","findItemWithFloor","getRandomCoordinates","enemy","state","setState","componentWillReceiveProps","nextProps","keyPress","handleKeyPressed","_this$state","onHelp","_enemiesAction","_this$state2","drawingMap","generatedMap","currentCreatures","rowIndex","colIndex","drawMap","NotificationHeader_NotificationHeader","App","_this2","acceptKeys","react_keyboard_event_handler_default","handleKeys","onKeyEvent","GamesMap_GamesMap","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1aab7f5e.chunk.js","sourcesContent":["// Возвращает случайное целое число между min (включительно) и max (включительно)\r\nexport default function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","import elements from '../data/elements';\r\nimport getRandomInt from './utils/getRandomInt';\r\n\r\n/**\r\n * @description Функция для случайной генерации на карте там, где уже расположен пол\r\n * @param {Array} inputMap - Входящий двухмерный массив\r\n * @param {Number} countOfObjects - Количество, необходимых сгенерировать на карте\r\n */\r\nexport default function createObject(inputMap, countOfObjects, object) {\r\n    const { floor } = elements;\r\n\r\n    for (let counter = 0; counter < countOfObjects; counter++) {\r\n        const x = getRandomInt(2, inputMap[0].length - 1),\r\n            y = getRandomInt(2, inputMap.length - 1),\r\n            len = inputMap[y][x].length - 1;\r\n\r\n        if (inputMap[y][x][len].icon === floor.icon) {\r\n            inputMap[y][x].push(object);\r\n        } else {\r\n            counter--;\r\n        }\r\n    }\r\n}\r\n","import createObject from './createObject';\r\nimport initMap from './initMap';\r\nimport startMap from '../data/map.json';\r\nimport { sword, shield, grass } from '../data/elements';\r\n\r\nexport default function createMap() {\r\n    const map = initMap(startMap);\r\n\r\n    createObject(map, 1, sword);\r\n    createObject(map, 1, shield);\r\n    createObject(map, 2, grass);\r\n\r\n    return map;\r\n}\r\n","import elements from '../data/elements';\r\n\r\n/**\r\n * @description Функция для преобразования входящего массива в массив объектов\r\n * @param {Array} map - Двумерный массив из спецсимволов\r\n * @return {Array} Возвращает трехмерный массив объектов\r\n */\r\nexport default function initMap(map) {\r\n    const { floor, wall, emptySpace } = elements;\r\n\r\n    return map.map(currentRow => currentRow.map((currentColumn) => {\r\n        switch (currentColumn) {\r\n            case '=': return [wall];\r\n            case '*': return [floor];\r\n            default: return [emptySpace];\r\n        }\r\n    }));\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class NotificationHeader extends Component {\r\n    heroStats = () => {\r\n        const { hero } = this.props;\r\n        if (hero) {\r\n            const message = `health: ${hero.health} | weapon: ${hero.weapon.name} | shield: ${hero.shield.name} | money: ${hero.money}`;\r\n            return message;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const { message } = this.props;\r\n\r\n        return (\r\n            <div className=\"message_bar\">\r\n                {this.heroStats()}\r\n                <br />\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class Hero {\r\n    constructor(y, x) {\r\n        this.positionX = x;\r\n        this.positionY = y;\r\n        this.icon = 'hero';\r\n        this.health = 100;\r\n        this.damage = 2;\r\n        this.defence = 0;\r\n        this.money = 0;\r\n        this.weapon = {\r\n            name: 'none'\r\n        };\r\n        this.shield = {\r\n            name: 'none'\r\n        };\r\n        this.countOfPoison = 0;\r\n        this.readyToMine = false;\r\n    }\r\n\r\n    effectsHandler() {\r\n        if (this.countOfPoison > 0) {\r\n            this.health -= this.countOfPoison;\r\n        }\r\n    }\r\n\r\n    eat() {\r\n        this.health += 100;\r\n        this.countOfPoison += 1;\r\n    }\r\n\r\n    takeWeapon(weapon) {\r\n        this.weapon = weapon;\r\n        this.damage += weapon.damage;\r\n    }\r\n\r\n    takeShield(shield) {\r\n        this.shield = shield;\r\n        this.defence += shield.defence;\r\n    }\r\n}\r\n","/**\r\n * @description Проверка совпадения координат 2 объектов\r\n * @return {Boolean} true - если объекты находятся в 1 ячейке\r\n */\r\nexport default function isContact(target_one, target_two) {\r\n    return target_one.positionX === target_two.positionX && target_one.positionY === target_two.positionY;\r\n}\r\n","import PF from 'pathfinding';\r\nimport isContact from './utils/isContact';\r\n\r\nfunction createMatrixForPF(inputMap, otherCreatures) {\r\n    const matrixForPF = inputMap.map((currentRow, indexRow) => {\r\n        return currentRow.map((currentColumn, indexCol) => {\r\n            const iconLastItem = currentColumn[currentColumn.length - 1].icon;\r\n            let hereEnemy = false;\r\n\r\n            otherCreatures.forEach((currentCreature) => {\r\n                if (currentCreature.positionY === indexRow && currentCreature.positionX === indexCol) {\r\n                    hereEnemy = true;\r\n                }\r\n            });\r\n            if (iconLastItem === 'wall' || hereEnemy) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    });\r\n\r\n    return matrixForPF;\r\n}\r\n\r\n/**\r\n * @description реализация нанесения урона текущим врагом по герою\r\n */\r\nfunction enemyHitsHero(creature, hero) {\r\n    const damagedHero = {\r\n        ...hero,\r\n        health: hero.health - creature.damage\r\n    };\r\n\r\n    return {\r\n        damagedHero: damagedHero\r\n    };\r\n}\r\n\r\n/**\r\n * @description реализация функции передвижения переданного врага\r\n */\r\nfunction onceEnemyAction(creature, map, hero, otherCreatures) {\r\n    const dy = [+0, +1, -1, 0, 1, -1, 0, 1, -1], // смещения, для обхвата площади\r\n        dx = [-1, -1, -1, 0, 0, +0, 1, 1, +1]; // размером 3х3 с центром в указанной точке\r\n\r\n    dy.forEach((currentDy, index) => {\r\n        const XpositionForCheckHero = creature.positionX + dx[index],\r\n            YpositionForCheckHero = creature.positionY + currentDy;\r\n\r\n        if (isContact({ positionX: XpositionForCheckHero, positionY: YpositionForCheckHero }, hero)) {\r\n            const { damagedHero } = enemyHitsHero(creature, hero);\r\n\r\n            hero = damagedHero;\r\n        }\r\n    });\r\n\r\n    const matrixForPF = createMatrixForPF(map, otherCreatures),\r\n        finder = new PF.AStarFinder(),\r\n        grid = new PF.Grid(matrixForPF),\r\n        path = finder.findPath(\r\n            creature.positionX,\r\n            creature.positionY,\r\n            hero.positionX,\r\n            hero.positionY,\r\n            grid\r\n        );\r\n\r\n    // Если путь не найден, массив будет пустым\r\n    // Если путь найден и следующий шаг будет не на позицию героя, тогда монстр двигается\r\n    if (path.length !== 0 && !(path[1][0] === hero.positionX && path[1][1] === hero.positionY)) {\r\n        creature.move(path[1][0], path[1][1]);\r\n    }\r\n\r\n    return {\r\n        updatedHero: { ...hero },\r\n        updatedCreature: creature\r\n    };\r\n}\r\n\r\n/**\r\n * Реализация действий всех существ на карте\r\n */\r\nfunction enemiesAction(hero, map, creatures) {\r\n    const updatedAllCreatures = creatures.map((creature) => {\r\n        if (creature.status === 'sleeping') {\r\n            creature.regeneration();\r\n\r\n            return creature;\r\n        }\r\n        const enemyWithoutCurrent = creatures.filter((currCreature) => {\r\n                return currCreature !== creature;\r\n            }),\r\n            {\r\n                updatedHero,\r\n                updatedCreature\r\n            } = onceEnemyAction(creature, map, hero, enemyWithoutCurrent);\r\n\r\n        hero = updatedHero;\r\n        return updatedCreature;\r\n    });\r\n\r\n    return {\r\n        updatedCreatures: [...updatedAllCreatures],\r\n        updatedHero: { ...hero }\r\n    };\r\n}\r\n\r\nexport default enemiesAction;\r\n","export default class Enemy {\r\n    constructor(positionX, positionY) {\r\n        this.positionX = positionX;\r\n        this.positionY = positionY;\r\n        this.icon = 'sleeping_enemy';\r\n        this.health = 100;\r\n        this.depthOfSleep = 2;\r\n        this.stamina = 0;\r\n        this.damage = 50;\r\n        this.status = 'sleeping';\r\n        this.type = 'enemy';\r\n    }\r\n\r\n    wakedUp() {\r\n        this.status = 'awake';\r\n        this.icon = 'awaken_enemy';\r\n        this.stamina = 20;\r\n        this.depthOfSleep = 0;\r\n    }\r\n\r\n    fallAsleep() {\r\n        this.status = 'sleeping';\r\n        this.icon = 'sleeping_enemy';\r\n        this.depthOfSleep = 2;\r\n    }\r\n\r\n    regeneration() {\r\n        if (this.health < 100 && this.health > 0) {\r\n            this.health += 1;\r\n            this.checkTemper();\r\n        }\r\n    }\r\n\r\n    checkTemper() {\r\n        if (this.status !== 'sleeping') {\r\n            switch (true) {\r\n                case (this.health >= 50 && this.health < 90):\r\n                    this.irritation();\r\n                    break;\r\n                case (this.health >= 20 && this.health < 50):\r\n                    this.rage();\r\n                    break;\r\n                case (this.health < 20):\r\n                    this.humility();\r\n                    break;\r\n                default: break;\r\n            }\r\n        }\r\n    }\r\n\r\n    getDamage(damage) {\r\n        if (+damage) {\r\n            this.health = this.health - damage;\r\n            if (this.health <= 0) {\r\n                this.dead();\r\n                return;\r\n            }\r\n            if (this.depthOfSleep === 1) {\r\n                this.wakedUp();\r\n            }\r\n            this.checkTemper();\r\n            if (this.depthOfSleep !== 0) {\r\n                this.depthOfSleep -= 1;\r\n            }\r\n        } else {\r\n            throw new Error('damage is not a number');\r\n        }\r\n    }\r\n\r\n    irritation() {\r\n        this.status = 'irritation';\r\n        this.damage = 60;\r\n        this.stamina = 30;\r\n    }\r\n\r\n    rage() {\r\n        this.status = 'rage';\r\n        this.damage = 100;\r\n        this.stamina = 40;\r\n    }\r\n\r\n    humility() {\r\n        this.status = 'humility';\r\n        this.damage = 10;\r\n        this.stamina = 6;\r\n    }\r\n\r\n    changePosition(newPositionX, newPositionY) {\r\n        this.positionX = newPositionX;\r\n        this.positionY = newPositionY;\r\n    }\r\n\r\n    move(newPositionX, newPositionY) {\r\n        this.positionX = newPositionX;\r\n        this.positionY = newPositionY;\r\n        this.tired();\r\n    }\r\n\r\n    dead() {\r\n        this.status = 'dead';\r\n    }\r\n\r\n    tired() {\r\n        if (this.stamina > 0) {\r\n            this.stamina -= 2;\r\n        } else if (this.stamina === 0) {\r\n            this.fallAsleep();\r\n        }\r\n    }\r\n}\r\n","/**\r\n * @description функция поиска самого верхнего элемента по заданным координатам\r\n * @return последний элемент массива в заданной ячейке карты\r\n */\r\nfunction getTopItem(map, y, x) {\r\n    const len = map[y][x].length;\r\n\r\n    return map[y][x][len - 1];\r\n}\r\n\r\nexport default getTopItem;\r\n","import getTopItem from './utils/getTopItem';\r\nimport isContact from './utils/isContact';\r\nimport elements from '../data/elements';\r\n\r\n/**\r\n * @description реализация сражения героя с монстром\r\n * @return creature - объект монстра после сражения\r\n */\r\nfunction heroHitsCreature(hero, creature) {\r\n    let message = 'you punch enemy',\r\n        isDied = false;\r\n\r\n    if (creature.status === 'sleeping') {\r\n        if (creature.depthOfSleep === 2) {\r\n            message = \"you punch sleeping enemy, once more punch for waked up\";\r\n        } else if (creature.depthOfSleep === 1) {\r\n            message = \"you punch sleeping enemy and woke him up\";\r\n        }\r\n        creature.getDamage(hero.damage);\r\n    } else {\r\n        const enemyStatusBefore = creature.status;\r\n\r\n        creature.getDamage(hero.damage);\r\n        if (enemyStatusBefore !== creature.status) {\r\n            switch (creature.status) {\r\n                case 'irritation':\r\n                    message = 'you punch enemy and he became irritated';\r\n                    break;\r\n                case 'rage':\r\n                    message = 'you punch enemy and he became raged';\r\n                    break;\r\n                case 'humility':\r\n                    message = 'you punch enemy and he became humble';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (creature.status === 'dead') {\r\n        message = 'you punch enemy and kill him';\r\n        isDied = true;\r\n    }\r\n\r\n    return {\r\n        isDied: isDied,\r\n        fightMessage: message\r\n    };\r\n}\r\n\r\n/**\r\n * @description реализация функции движения героя на карте\r\n * @return message - лог событий или false,\r\n * movedHero - обновленный объект героя,\r\n * updatedCreatures - обновленный список врагов\r\n */\r\nfunction moveHero(map, hero, key, creatures) {\r\n    let dx = 0,\r\n        dy = 0,\r\n        message = false,\r\n        wasAfight = false,\r\n        changeMap = false,\r\n        isMoved = false;\r\n\r\n    switch (key) {\r\n        case \"left\": dx = -1; break;\r\n        case \"right\": dx = 1; break;\r\n        case \"up\": dy = -1; break;\r\n        case \"down\": dy = 1; break;\r\n        default: throw new Error(\"key is not correct:\" + key);\r\n    }\r\n\r\n    const xTravelCoordinates = hero.positionX + dx,\r\n        yTravelCoordinates = hero.positionY + dy,\r\n        upperItem = getTopItem(map, yTravelCoordinates, xTravelCoordinates),\r\n\r\n        updatedCreatures = creatures.reduce((accumulator, currentCreature) => {\r\n            if (isContact({ positionX: xTravelCoordinates, positionY: yTravelCoordinates }, currentCreature)) {\r\n                const {\r\n                        fightMessage,\r\n                        isDied\r\n                    } = heroHitsCreature(hero, currentCreature),\r\n                    { ectoplasma } = elements;\r\n\r\n                wasAfight = true;\r\n                message = fightMessage;\r\n                if (isDied) {\r\n                    changeMap = true;\r\n                    map[yTravelCoordinates][xTravelCoordinates].push(ectoplasma);\r\n                } else {\r\n                    accumulator.push(currentCreature);\r\n                }\r\n            } else {\r\n                accumulator.push(currentCreature);\r\n            }\r\n\r\n            return accumulator;\r\n        }, []);\r\n\r\n    if (!wasAfight) {\r\n        switch (upperItem.icon) {\r\n            case 'wall':\r\n                message = 'there is no the way';\r\n                break;\r\n            case ' ':\r\n                message = 'Its whitespace? how did you do this?? (bug!)';\r\n                break;\r\n            case 'grass':\r\n                isMoved = true;\r\n                message = 'you stay at ' + upperItem.icon + ' and feels fresh green leaves by your foots :з.';\r\n                break;\r\n            default:\r\n                if (upperItem.type) {\r\n                    message = 'you stay at ' + upperItem.icon + ', if you wanna pick it up, press \"p\"';\r\n                }\r\n                isMoved = true;\r\n        }\r\n    }\r\n\r\n    const updatedMap = changeMap ? map : [];\r\n\r\n    return {\r\n        message: message,\r\n        movedHero: {\r\n            ...hero,\r\n            positionX: isMoved ? xTravelCoordinates : hero.positionX,\r\n            positionY: isMoved ? yTravelCoordinates : hero.positionY\r\n        },\r\n        updatedMap: updatedMap,\r\n        updatedCreatures: updatedCreatures\r\n    };\r\n}\r\n\r\nexport default moveHero;\r\n","import elements from '../data/elements';\r\n\r\n/**\r\n * реализация возможности увеличения карты с возможной заменой массива элементов на переданный\r\n *\r\n * @param {Object} targetCoordinate - координаты точки для смещений\r\n * @param {Array} dx - массив смещений для координаты x\r\n * @param {Array} dy - массив смещений для координаты y\r\n * @param {Array} map - трехмерный массив объектов карты, которую необходимо увеличить\r\n * @param {Object} hero - объект героя, координаты которого необходимо менять в зависсимости от расширения\r\n * @param {Object} replacement - объект, который необходимо сгенерировать на всех координатах смещения\r\n * @param {Array} elementsForReplace - массив объектов, которые будут заменены на элемент replacement\r\n * @param {Array} creatures - массив объектов врага, координаты которых необходимо менять при расширении карты\r\n * @returns {Object} updatedTargetCoordinates - новые координаты вскапываемой точки,\r\n * map - увеличенная карта,\r\n * hero - новые координаты героя,\r\n * creatures - массив объектов врагов с новыми координатами\r\n */\r\nfunction expansionMap(targetCoordinate, dx, dy, map, hero, replacement, replacementItems, creatures) {\r\n    const mapForUpdate = [...map],\r\n        allEnemyOnMap = [...creatures],\r\n        elementsForReplace = [...replacementItems],\r\n        { emptySpace } = elements;\r\n    let { x: targetCoordinateX, y: targetCoordinateY } = targetCoordinate,\r\n        { positionX: heroPositionX, positionY: heroPositionY } = hero;\r\n\r\n    dy.forEach((currentDy, index) => {\r\n        let checkCoordinateY = targetCoordinateY + currentDy,\r\n            checkCoordinateX = targetCoordinateX + dx[index];\r\n\r\n        if (mapForUpdate[checkCoordinateY] === undefined) {\r\n            while (checkCoordinateY < 0 || checkCoordinateY > mapForUpdate.length - 1) {\r\n                const newAddedLine = [];\r\n\r\n                mapForUpdate[heroPositionY].forEach(() => {\r\n                    newAddedLine.push([emptySpace]);\r\n                });\r\n                newAddedLine[checkCoordinateX] = [replacement];\r\n                if (checkCoordinateY < 0) { // добавление новой линии к карте сверху\r\n                    mapForUpdate.unshift(newAddedLine); // добавление в начало массива map значения newAddedLine\r\n                    heroPositionY += 1;\r\n                    targetCoordinateY += 1;\r\n                    checkCoordinateY += 1;\r\n                    allEnemyOnMap.forEach((currentEnemy) => {\r\n                        currentEnemy.positionY += 1;\r\n                    });\r\n                } else if (checkCoordinateY > mapForUpdate.length - 1) { // добавление линии снизу\r\n                    mapForUpdate.push(newAddedLine);\r\n                }\r\n            }\r\n        } else if (mapForUpdate[checkCoordinateY][checkCoordinateX] === undefined) {\r\n            while (checkCoordinateX < 0 || checkCoordinateX > mapForUpdate[checkCoordinateY].length - 1) {\r\n                if (checkCoordinateX < 0) { // добавление новой клетки к карте слева\r\n                    mapForUpdate.forEach((currentRow) => {\r\n                        currentRow.unshift([emptySpace]); // добавление в начало каждой строки элемента\r\n                    });\r\n                    allEnemyOnMap.forEach((currentEnemy) => {\r\n                        currentEnemy.positionX += 1;\r\n                    });\r\n                    mapForUpdate[checkCoordinateY][0][0] = replacement;\r\n                    heroPositionX += 1;\r\n                    targetCoordinateX += 1;\r\n                    checkCoordinateX += 1;\r\n                } else { // добавление столбца к карте справа\r\n                    mapForUpdate.forEach((currentRow) => {\r\n                        currentRow.push([emptySpace]);\r\n                    });\r\n                }\r\n            }\r\n            mapForUpdate[checkCoordinateY][checkCoordinateX][0] = replacement;\r\n        } else {\r\n            elementsForReplace.forEach((currentReplace) => {\r\n                if (mapForUpdate[checkCoordinateY][checkCoordinateX][0].icon === currentReplace.icon) {\r\n                    mapForUpdate[checkCoordinateY][checkCoordinateX][0] = replacement;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return {\r\n        updatedTargetCoordinates: {\r\n            x: targetCoordinateX,\r\n            y: targetCoordinateY\r\n        },\r\n        map: [...mapForUpdate],\r\n        hero: {\r\n            ...hero,\r\n            positionX: heroPositionX,\r\n            positionY: heroPositionY\r\n        },\r\n        creatures: [...allEnemyOnMap]\r\n    };\r\n}\r\n\r\nexport default expansionMap;\r\n","import elements from '../data/elements';\r\nimport expansionMap from './expansionMap';\r\nimport getRandomInt from './utils/getRandomInt';\r\n\r\n/**\r\n * Реализация генерации входа в пещеру на карте\r\n */\r\nfunction drawTunnel(diggingCoordinate, generateGem, map, hero, creatures) {\r\n    const { floor, emptySpace, wall, gem } = elements,\r\n        dx = [-1, -1, -1, 0, 0, +0, 1, 1, +1], // смещения, для обхвата площади\r\n        dy = [+0, +1, -1, 0, 1, -1, 0, 1, -1], // размером 3х3 с центром в указанной точке\r\n\r\n        { // Генерация стен вокруг указанной точки\r\n            updatedTargetCoordinates: digCoordinateOnMapWithWall,\r\n            map: mapWithWall,\r\n            hero: heroCoordOnMapWithWall,\r\n            creatures: creaturesOnMapWithWall\r\n        } = expansionMap(\r\n            diggingCoordinate, dx, dy, map,\r\n            hero, wall, [emptySpace], creatures\r\n        ),\r\n        { // Замена стены в указанной точке на пол\r\n            updatedTargetCoordinates: digCoordOnMapWithTunnel,\r\n            map: mapWithTunnel,\r\n            hero: heroOnMapWithTunnel,\r\n            creatures: creaturesOnMapWithTunnel\r\n        } = expansionMap(\r\n            digCoordinateOnMapWithWall, [0], [0], mapWithWall,\r\n            heroCoordOnMapWithWall, floor, [wall], creaturesOnMapWithWall\r\n        );\r\n    let message = false;\r\n\r\n    if (generateGem) {\r\n        const RANDOM_GENERATE_GEM = getRandomInt(0, 9);\r\n\r\n        if (RANDOM_GENERATE_GEM === 0) {\r\n            mapWithTunnel[digCoordinateOnMapWithWall.y][digCoordinateOnMapWithWall.x].push(gem);\r\n            message = 'you found a gem!';\r\n        }\r\n    }\r\n\r\n    return {\r\n        updateDiggingCoordinate: { ...digCoordOnMapWithTunnel },\r\n        map: [...mapWithTunnel],\r\n        hero: { ...heroOnMapWithTunnel },\r\n        creatures: [...creaturesOnMapWithTunnel],\r\n        message: message\r\n    };\r\n}\r\n\r\nexport default drawTunnel;\r\n","import elements from '../data/elements';\r\nimport expansionMap from './expansionMap';\r\nimport Enemy from '../Units/Enemy';\r\nimport drawTunnel from './drawTunnel';\r\n\r\n/**\r\n * Реализация генерации пещеры с сокровищем на карте\r\n */\r\nfunction drawBodyCave(targetCoordinate, treasure, map, hero, creatures) {\r\n    const { floor, emptySpace, wall, grass, iron_sword, iron_shield } = elements,\r\n        dx = [-1, -1, -1, 0, 0, +0, 1, 1, +1], // смещения, для обхвата площади\r\n        dy = [+0, +1, -1, 0, 1, -1, 0, 1, -1], // размером 3х3 с центром в указанной точке\r\n        wall_dx = [-1, 0, 1, -2, 2, -2, 2, -2, 2, -2, +2, -2, -1, +0, +1, +2], // смещения для отрисовки\r\n        wall_dy = [+2, 2, 2, +2, 2, +1, 1, +0, 0, -1, -1, -2, -2, -2, -2, -2], // стен во всех пещерах\r\n\r\n        { // Генерация пола пещеры размером 3х3 с центром в указанной точке\r\n            updatedTargetCoordinates: targetCoordinateOnMapWithFloorCave,\r\n            map: mapWithFloorCave,\r\n            hero: heroOnMapWithFloorCave,\r\n            creatures: creaturesOnMapWithFloorCave\r\n        } = expansionMap(targetCoordinate, dx, dy, map, hero, floor, [emptySpace, wall], creatures),\r\n\r\n        { // Генерация стен вокруг пещеры с центром в указанной точке\r\n            updatedTargetCoordinates: targetCoordOnMapWithCave,\r\n            map: mapWithCave,\r\n            hero: heroOnMapWithCave,\r\n            creatures: creaturesOnMapWithCave\r\n        } = expansionMap(\r\n            targetCoordinateOnMapWithFloorCave, wall_dx, wall_dy, mapWithFloorCave,\r\n            heroOnMapWithFloorCave, wall, [emptySpace], creaturesOnMapWithFloorCave\r\n        );\r\n    let resultCreaturesOnMap = [...creaturesOnMapWithCave];\r\n\r\n    switch (treasure) {\r\n        case 'enemy':\r\n            resultCreaturesOnMap = [\r\n                ...resultCreaturesOnMap,\r\n                new Enemy(targetCoordOnMapWithCave.x, targetCoordOnMapWithCave.y)\r\n            ];\r\n            break;\r\n        case 'grass':\r\n            mapWithCave[targetCoordOnMapWithCave.y][targetCoordOnMapWithCave.x].push(grass);\r\n            break;\r\n        case 'iron sword':\r\n            mapWithCave[targetCoordOnMapWithCave.y][targetCoordOnMapWithCave.x].push(iron_sword);\r\n            break;\r\n        case 'iron shield':\r\n            mapWithCave[targetCoordOnMapWithCave.y][targetCoordOnMapWithCave.x].push(iron_shield);\r\n            break;\r\n        case 'none':\r\n            break;\r\n        default:\r\n            throw new Error(`Treasure is not correct: ${treasure}`);\r\n    }\r\n\r\n    return {\r\n        mapWithCave: [...mapWithCave],\r\n        heroOnMapWithCave: { ...heroOnMapWithCave },\r\n        creaturesOnMapWithCave: [...resultCreaturesOnMap]\r\n    };\r\n}\r\n\r\n/**\r\n * @description реализация генерации пещеры на карте\r\n * @return generateEnemy false - если пещера сгенерирована без врага, object - враг\r\n */\r\nfunction drawCave(diggingCoordinate, direction, treasure, map, hero, creatures) {\r\n    const {\r\n        updateDiggingCoordinate: diggingCoordinateWithTunnel,\r\n        map: mapWithTunnel,\r\n        hero: heroOnMapWithTunnel,\r\n        creatures: creaturesOnMapWithTunnel\r\n    } = drawTunnel(diggingCoordinate, false, map, hero, creatures);\r\n\r\n    switch (direction) {\r\n        case 'left':\r\n            diggingCoordinateWithTunnel.x -= 2;\r\n            break;\r\n        case 'right':\r\n            diggingCoordinateWithTunnel.x += 2;\r\n            break;\r\n        case 'up':\r\n            diggingCoordinateWithTunnel.y -= 2;\r\n            break;\r\n        case 'down':\r\n            diggingCoordinateWithTunnel.y += 2;\r\n            break;\r\n        default:\r\n            throw new Error(\"direction is not a correct:\" + direction);\r\n    }\r\n    const {\r\n        mapWithCave,\r\n        heroOnMapWithCave,\r\n        creaturesOnMapWithCave\r\n    } = drawBodyCave(diggingCoordinateWithTunnel, treasure, mapWithTunnel, heroOnMapWithTunnel, creaturesOnMapWithTunnel);\r\n\r\n    return {\r\n        mapWithCave: [...mapWithCave],\r\n        heroOnMapWithCave: { ...heroOnMapWithCave },\r\n        creaturesOnMapWithCave: [...creaturesOnMapWithCave]\r\n    };\r\n}\r\n\r\nexport default drawCave;\r\n","import moveHero from './moveHero';\r\nimport digging from './digging';\r\n\r\nfunction movingAndDigging(map, hero, key, creatures) {\r\n    let loggingMessage,\r\n        heroAfterAction = hero,\r\n        allEnemyAfterAction = creatures,\r\n        mapAfterAction = map;\r\n\r\n    if (hero.readyToMine) {\r\n        const {\r\n            message,\r\n            updatedMap,\r\n            updatedHero,\r\n            updatedCreatures\r\n        } = digging(map, hero, key, creatures);\r\n\r\n\r\n        allEnemyAfterAction = updatedCreatures;\r\n        mapAfterAction = updatedMap;\r\n        heroAfterAction = updatedHero;\r\n        loggingMessage = message;\r\n    } else {\r\n        const {\r\n            message,\r\n            movedHero,\r\n            updatedMap,\r\n            updatedCreatures\r\n        } = moveHero(map, hero, key, creatures);\r\n\r\n        if (updatedMap.length !== 0) {\r\n            mapAfterAction = updatedMap;\r\n        }\r\n        allEnemyAfterAction = updatedCreatures;\r\n        heroAfterAction = movedHero;\r\n        loggingMessage = message;\r\n    }\r\n\r\n    return {\r\n        map: mapAfterAction,\r\n        hero: heroAfterAction,\r\n        message: loggingMessage,\r\n        creatures: allEnemyAfterAction\r\n    };\r\n}\r\n\r\nexport default movingAndDigging;\r\n","import getRandomInt from './utils/getRandomInt';\r\nimport getTopItem from './utils/getTopItem';\r\nimport drawCave from './drawCave';\r\nimport drawTunnel from './drawTunnel';\r\n\r\n/**\r\n * @description реализация функции копания для героя\r\n * @return message, x, y\r\n */\r\nexport default function digging(map, hero, direction, creatures) {\r\n    let dx = 0,\r\n        dy = 0;\r\n\r\n    switch (direction) {\r\n        case \"left\": dx = -1; break;\r\n        case \"right\": dx = 1; break;\r\n        case \"up\": dy = -1; break;\r\n        case \"down\": dy = 1; break;\r\n        default: throw new Error(\"Некорректный параметр direction:\" + direction);\r\n    }\r\n\r\n    const diggingCoordinate = {\r\n            x: hero.positionX + dx,\r\n            y: hero.positionY + dy\r\n        },\r\n        diggingItem = getTopItem(map, diggingCoordinate.y, diggingCoordinate.x);\r\n\r\n    let updatedObjects = {\r\n        message: \"there is nothing to dig\",\r\n        updatedCreatures: [...creatures],\r\n        updatedHero: {\r\n            ...hero,\r\n            readyToMine: false\r\n        },\r\n        updatedMap: [...map]\r\n    };\r\n\r\n    if (diggingItem.icon !== 'wall') {\r\n        return updatedObjects;\r\n    }\r\n\r\n    const RANDOM_GENERATE_CAVE = getRandomInt(0, 4);\r\n\r\n    if (RANDOM_GENERATE_CAVE === 0) { // Условие для генерации пещеры, шанс 20%\r\n        const RANDOM_GENERATE_ITEM = getRandomInt(0, 7);\r\n        let message = '',\r\n            treasure = '';\r\n\r\n        switch (true) {\r\n            case (RANDOM_GENERATE_ITEM === 2 || RANDOM_GENERATE_ITEM === 3):\r\n                message = 'you found cave with enemy!';\r\n                treasure = 'enemy';\r\n                break;\r\n            case (RANDOM_GENERATE_ITEM === 4 || RANDOM_GENERATE_ITEM === 5):\r\n                message = 'you found cave with grass!';\r\n                treasure = 'grass';\r\n                break;\r\n            case (RANDOM_GENERATE_ITEM === 6):\r\n                message = 'you found cave with iron shield!';\r\n                treasure = 'iron shield';\r\n                break;\r\n            case (RANDOM_GENERATE_ITEM === 7):\r\n                message = 'you found cave with iron sword!';\r\n                treasure = 'iron sword';\r\n                break;\r\n            default:\r\n                message = 'you found empty cave';\r\n                treasure = 'none';\r\n        }\r\n\r\n        const {\r\n            mapWithCave,\r\n            heroOnMapWithCave,\r\n            creaturesOnMapWithCave\r\n        } = drawCave(diggingCoordinate, direction, treasure, map, hero, creatures);\r\n\r\n        updatedObjects = {\r\n            ...updatedObjects,\r\n            message: message,\r\n            updatedMap: [...mapWithCave],\r\n            updatedHero: {\r\n                ...heroOnMapWithCave,\r\n                readyToMine: false\r\n            },\r\n            updatedCreatures: [...creaturesOnMapWithCave]\r\n        };\r\n    } else {\r\n        // Если рандом на пещеру не выпал, тогда отрисовываем\r\n        // туннель с вероятностью раскопки камня 10%\r\n        const {\r\n            map: mapWithTunnel,\r\n            hero: heroOnMapWithTunnel,\r\n            creatures: creaturesOnMapWithTunnel,\r\n            message: messageAboutGeneratedGem\r\n        } = drawTunnel(diggingCoordinate, true, map, hero, creatures);\r\n\r\n        updatedObjects = {\r\n            ...updatedObjects,\r\n            message: messageAboutGeneratedGem,\r\n            updatedMap: [...mapWithTunnel],\r\n            updatedHero: {\r\n                ...heroOnMapWithTunnel,\r\n                readyToMine: false\r\n            },\r\n            updatedCreatures: [...creaturesOnMapWithTunnel]\r\n        };\r\n    }\r\n\r\n    return updatedObjects;\r\n}\r\n","import movingAndDigging from './movingAndDigging';\r\nimport pickUp from './pickUp';\r\n\r\nexport default function heroActions(hero, map, creatures, key) {\r\n    let message;\r\n\r\n    switch (key) {\r\n        case 'p':\r\n            message = pickUp(map, hero);\r\n            break;\r\n        case 'd':\r\n            if (hero.weapon.name !== 'none') {\r\n                hero.readyToMine = !hero.readyToMine;\r\n                if (hero.readyToMine) {\r\n                    message = `you rised the pickaxe (${hero.weapon.name}). Now, choose direction to dig`;\r\n                } else {\r\n                    message = `you lower the pickaxe (${hero.weapon.name})`;\r\n                }\r\n            } else {\r\n                message = 'you need any weapon to dig';\r\n            }\r\n            break;\r\n        default: {\r\n            const {\r\n                map: mapAfterHeroAction,\r\n                hero: heroAfterAction,\r\n                message: messageOfHeroAction,\r\n                creatures: creaturesAfterHeroAction\r\n            } = movingAndDigging(map, hero, key, creatures);\r\n\r\n            map = mapAfterHeroAction;\r\n            hero = heroAfterAction;\r\n            message = messageOfHeroAction;\r\n            creatures = creaturesAfterHeroAction;\r\n        }\r\n    }\r\n    // hero.effectsHandler();\r\n\r\n    return message;\r\n}\r\n","import getTopItem from './utils/getTopItem';\r\n\r\n/**\r\n * @description Функция реализации поднятия героем предметов\r\n */\r\nexport default function pickUp(map, hero) {\r\n    const gex = getTopItem(map, hero.positionY, hero.positionX);\r\n    let message;\r\n\r\n    switch (gex.type) {\r\n        case 'money':\r\n            hero.money += 10;\r\n            map[hero.positionY][hero.positionX].pop(); // удаляем на карте предмет, который подняли\r\n            message = 'you raised money and take 10 gold! ^_^';\r\n            break;\r\n        case 'shield':\r\n            hero.takeShield(gex);\r\n            map[hero.positionY][hero.positionX].pop(); // удаляем на карте предмет, который подняли\r\n            message = 'you raised ' + gex.name + '!';\r\n            break;\r\n        case 'weapon':\r\n            hero.takeWeapon(gex);\r\n            map[hero.positionY][hero.positionX].pop(); // удаляем на карте предмет, который подняли\r\n            message = 'you raised ' + gex.name + ' and increace your power!';\r\n            break;\r\n        case 'food':\r\n            hero.eat();\r\n            map[hero.positionY][hero.positionX].pop(); // удаляем на карте предмет, который подняли\r\n            message = 'you picked up and eat ' + gex.name + ', but feel bad';\r\n            break;\r\n        default:\r\n            message = 'no items to take';\r\n    }\r\n    return message;\r\n}\r\n","import React, { Component } from 'react';\r\nimport drawMap from '../functional/drawMap';\r\nimport createMap from '../functional/createMap';\r\nimport getRandomCoordinates from '../functional/utils/getRandomCoordinates';\r\nimport NotificationHeader from './NotificationHeader';\r\nimport Hero from '../Units/Hero';\r\nimport enemiesAction from '../functional/enemiesAction';\r\nimport Enemy from '../Units/Enemy';\r\nimport heroActions from '../functional/heroActions';\r\n\r\nexport default class GamesMap extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            onHelp: false,\r\n            message: '',\r\n            hero: new Hero(2, 2),\r\n            creatures: []\r\n        };\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        const createdMap = createMap(),\r\n            coordinates = getRandomCoordinates(createdMap),\r\n            enemy = new Enemy(coordinates.x, coordinates.y),\r\n            { creatures } = this.state;\r\n\r\n        creatures.push(enemy);\r\n        this.setState({\r\n            map: createdMap,\r\n            creatures: creatures\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const { keyPress } = nextProps;\r\n\r\n        if (keyPress !== null) {\r\n            this.handleKeyPressed(keyPress);\r\n        }\r\n    }\r\n\r\n    handleKeyPressed = (key) => {\r\n        const { map, hero, creatures, onHelp } = this.state;\r\n\r\n        if (key === 'h') {\r\n            this.setState({\r\n                onHelp: !onHelp\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        const { message } = heroActions(hero, map, creatures, key),\r\n            { updatedHero, updatedCreatures } = enemiesAction(hero, map, creatures);\r\n\r\n        this.setState({\r\n            hero: updatedHero,\r\n            map: map,\r\n            message: message,\r\n            creatures: updatedCreatures\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { map, hero, message, creatures, onHelp } = this.state;\r\n        let drawingMap = [];\r\n\r\n        if (map) {\r\n            drawingMap = drawMap(map, hero, creatures);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {onHelp\r\n                    ? (\r\n                        <div>\r\n                            <h1>||HELP||</h1>\r\n                            <h3>1. for moving use arrow keys</h3>\r\n                            <h3>2. for digging use \"d\" key. Works only if you have any weapon</h3>\r\n                            <h3>3. for close help menu press \"h\" key again</h3>\r\n                        </div>\r\n                    )\r\n                    : (\r\n                        <div>\r\n                            <NotificationHeader\r\n                                hero={hero}\r\n                                message={message}\r\n                            />\r\n                            <table>\r\n                                <tbody>\r\n                                    {drawingMap}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import elements from '../../data/elements';\r\nimport getRandomInt from './getRandomInt';\r\n\r\n// Тут отсутствуют проверки на существование пола на карте по текущим координатам.\r\n// Есть интересная возможность зациклиться всему приложению в этом месте.\r\nexport default function getRandomCoordinates(map) {\r\n    const { floor } = elements;\r\n    let findItemWithFloor = false,\r\n        coordinateX,\r\n        coordinateY;\r\n\r\n    while (!findItemWithFloor) {\r\n        coordinateX = getRandomInt(2, map[0].length - 1);\r\n        coordinateY = getRandomInt(2, map.length - 1);\r\n\r\n        const len = map[coordinateY][coordinateX].length - 1;\r\n\r\n        if (map[coordinateY][coordinateX][len].icon === floor.icon) {\r\n            findItemWithFloor = true;\r\n        }\r\n    }\r\n\r\n    return {\r\n        x: coordinateX,\r\n        y: coordinateY\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\n/**\r\n * @description Функция для преобразования карты в формат для отрисовки\r\n * @param {Array} inputMap - Входящий двухмерный массив\r\n * @return {Array} - Возвращает новый массив для отрисовки\r\n */\r\nexport default function drawMap(inputMap, hero, creatures) {\r\n    const generatedMap = inputMap.map(currentRow => (\r\n        currentRow.map(currentColumn => (\r\n            currentColumn[currentColumn.length - 1].icon\r\n        ))\r\n    ));\r\n\r\n    generatedMap[hero.positionY][hero.positionX] = hero.icon;\r\n\r\n    creatures.forEach((currentCreatures) => {\r\n        generatedMap[currentCreatures.positionY][currentCreatures.positionX] = currentCreatures.icon;\r\n    });\r\n\r\n    return generatedMap.map((currentRow, rowIndex) => (\r\n        <tr key={rowIndex}>\r\n            {currentRow.map((currentColumn, colIndex) => (\r\n                <td key={colIndex}>\r\n                    <div className={`map_object ${currentColumn}`} />\r\n                </td>\r\n            ))}\r\n        </tr>\r\n    ));\r\n}\r\n","import KeyboardEventHandler from 'react-keyboard-event-handler';\r\nimport React, { Component } from 'react';\r\nimport GamesMap from './GamesMap';\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            keyPress: null\r\n        };\r\n    }\r\n\r\n    handleKeyPressed = (key) => {\r\n        this.setState({\r\n            keyPress: key\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let acceptKeys = ['down', 'left', 'right', 'up', 'h', 'p', 'd'];\r\n        const { onHelp, keyPress } = this.state;\r\n\r\n        if (onHelp) {\r\n            acceptKeys = ['h'];\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <KeyboardEventHandler\r\n                    handleKeys={acceptKeys}\r\n                    onKeyEvent={key => this.handleKeyPressed(key)}\r\n                />\r\n                <GamesMap keyPress={keyPress} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\nimport './tiles/styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}